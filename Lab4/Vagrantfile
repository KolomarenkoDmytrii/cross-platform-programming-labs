# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.define "ubuntu" do |ubuntu|
    ubuntu.vm.box = "alvistack/ubuntu-24.04"

    ubuntu.vm.network "forwarded_port", guest: 5000, host: 8080

    # Share an additional folder to the guest VM. The first argument is
    # the path on the host to the actual folder. The second argument is
    # the path on the guest to mount the folder. And the optional third
    # argument is a set of non-required options.
    # config.vm.synced_folder "../data", "/vagrant_data"

    # Disable the default share of the current code directory. Doing this
    # provides improved isolation between the vagrant box and your host
    # by making sure your Vagrantfile isn't accessible to the vagrant box.
    # If you use this you may want to enable additional shared subfolders as
    # shown above.
    # config.vm.synced_folder ".", "/vagrant", disabled: true

    ubuntu.vm.provider "virtualbox" do |vb|
      # Customize the amount of memory on the VM:
      vb.memory = "2048"
    end

    # Enable provisioning with a shell script. Additional provisioners such as
    # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
    # documentation for more information about their specific syntax and use.
    ubuntu.vm.provision "shell", inline: <<-SHELL
      apt-get update

      echo ""
      echo "=== Installing dotnet sdk ==="
      apt-get install -y dotnet-sdk-8.0

      echo ""
      echo "=== Installing zip and unzip ==="
      apt-get install -y zip unzip

      echo ""
      echo "=== Run app ==="
      mkdir /tmp/Lab4
      cp -r /vagrant/* /tmp/Lab4
      cd /tmp/Lab4
      dotnet build
      # dotnet run --project /vagrant/Lab4.App/Lab4.App.csproj -- version

      echo "run-labs version"
      dotnet run --project Lab4.App/Lab4.App.csproj -- version

      echo "run-labs run lab1"
      dotnet run --project Lab4.App/Lab4.App.csproj -- run lab1 -I /vagrant/lab1_input.txt -o /vagrant/lab1_output.txt

      echo "run-labs run lab2"
      dotnet run --project Lab4.App/Lab4.App.csproj -- run lab2 -I /vagrant/lab2_input.txt -o /vagrant/lab2_output.txt

      echo "run-labs run lab3"
      dotnet run --project Lab4.App/Lab4.App.csproj -- run lab3 -I /vagrant/lab3_input.txt -o /vagrant/lab3_output.txt

      echo ""
      echo "=== Installing and running BaGetter ==="
      mkdir /tmp/BaGetter
      wget https://github.com/bagetter/BaGetter/releases/download/v1.5.0/bagetter-1.5.0.zip -O /tmp/BaGetter/BaGetter.zip
      mkdir /vagrant/bagetter
      unzip -o /tmp/BaGetter/BaGetter.zip -d /vagrant/bagetter
      rm /tmp/BaGetter/BaGetter.zip

      cd /vagrant/bagetter
      dotnet BaGetter.dll --urls "http://*:5000" &

      echo ""
      echo "=== Pushing dotnet package ==="
      dotnet pack /vagrant/Lab4.App/Lab4.csproj
      dotnet nuget push -s http://localhost:5000/v3/index.json /vagrant/nupkg/DKolomarenko.1.0.2.nupkg --skip-duplicate
    SHELL
  end
end
